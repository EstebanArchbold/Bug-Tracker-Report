"""
Filename: test_mini_statement.py

INFT 1207 - Sp/Su 2023 __ Group 6
Test cases 8: Mini Statements, FINAL PROJECT

Members(Sort by name in alphabet orders):
#   Jiaxing Chen (Gary)

# Test cases: 
#     Project Section...:
#     08 --- Mini Statement (MS#)
# File purpose:
#   Test Cases through Selenium to a website.
# Test Site: 
#   http://demo.guru99.com/V4/

Last Updated on: August 8, 2023
Created on: August 4, 2023


# Testing login: (usrID:mngr520629 Passwd:mEdUbEb )

"""
# Generated by Selenium IDE
import unittest
from ssl import AlertDescription
import HtmlTestRunner
import pytest
import time
from time import sleep
import json
from selenium import webdriver
from selenium.webdriver.common.alert import Alert
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities


# Global variables for different testing accounts:
global user_id, user_passwd,Account_No
user_id = "mngr520629"
user_passwd = "mEdUbEb"
AccountNo = "125290"



class test_mini_statement(unittest.TestCase):
    def setup_method(self, method):
        self.driver = webdriver.Chrome()
        self.vars = {}

        # Pre-test config
        driver = self.driver

        # -3: Go to login webpage
        driver.get("https://demo.guru99.com/V4/")

        # -2: input User Credentials
        driver.find_element(By.NAME, "uid").send_keys(user_id)
        driver.find_element(By.NAME, "password").send_keys(user_passwd)

        # -1: Login
        driver.find_element(By.NAME, "btnLogin").click()

        # Step 0: Verify Login
        assert driver.find_element(By.XPATH, "/html/body/table/tbody/tr/td/table/tbody/tr[3]/td").text == "Manger Id : "+user_id
        print("\nLogin Confirmed: Mainpage")


    def teardown_method(self, method):
        self.driver.quit()

    print("Commence Test 08: Mini Statement")
    ## MS1-5: Verifying account number

    def test8_MS1(self):
        # Pre-test config
        driver = self.driver
        driver.find_element(By.LINK_TEXT, "Mini Statement").click()
        # MS1: Account number cannot be empty
        driver.find_element(By.NAME, "accountno").click()
        driver.find_element(By.NAME, "accountno").send_keys(Keys.TAB)
        assert driver.find_element(By.ID, "message2").text == "Account Number must not be blank"
        print("MS1")

    def test8_MS2(self):
        driver = self.driver
        driver.find_element(By.LINK_TEXT, "Mini Statement").click()
        # MS2: Account number must be numeric.
        driver.find_element(By.NAME, "accountno").clear()
        driver.find_element(By.NAME, "accountno").send_keys("qwe")
        assert driver.find_element(By.ID, "message2").text == "Characters are not allowed"
        print("MS2")

    def test8_MS3(self):
        driver = self.driver
        driver.find_element(By.LINK_TEXT, "Mini Statement").click()
        # MS3: Account number cannot have special character.
        driver.find_element(By.NAME, "accountno").clear()
        driver.find_element(By.NAME, "accountno").send_keys("!@#")
        assert driver.find_element(By.ID, "message2").text == "Special characters are not allowed"
        print("MS3")
        
    def test8_MS4(self):
        driver = self.driver
        driver.find_element(By.LINK_TEXT, "Mini Statement").click()
        
        # MS4: Account number cannot have blank space.
        driver.find_element(By.NAME, "accountno").clear()
        driver.find_element(By.NAME, "accountno").send_keys("123 12")
        
        msg2 = driver.find_element(By.ID, "message2").text
        assert msg2 == "Characters are not allowed"
        if msg2 != "":
            print('MS4 Output: ', msg2)
        
    def test8_MS5(self):
        driver = self.driver
        driver.find_element(By.LINK_TEXT, "Mini Statement").click()
        # MS5: First Character cannot be space
        driver.find_element(By.NAME, "accountno").clear()
        driver.find_element(By.NAME, "accountno").send_keys(" 1")
        driver.find_element(By.NAME, "accountno").send_keys(Keys.TAB)
        
        msg2 = driver.find_element(By.ID, "message2").text
        assert msg2 == "First character cannot have space"
        if msg2 != "":
            print('=MS5 Output: ', msg2)

    # MS6 - Verifying Submit Button
    def test8_MS6(self):
        driver = self.driver
        driver.find_element(By.LINK_TEXT, "Mini Statement").click()
        
        # MS6: Valid Account Number
        #  ! Swap valid accountNo !
        print("MS6: Input AccountNo: "+AccountNo)
        driver.find_element(By.NAME, "accountno").clear()
        driver.find_element(By.NAME, "accountno").send_keys(AccountNo)
        driver.find_element(By.NAME, "AccSubmit").click()
        print("MS6: Spectating statement table")
        assert driver.title == "Guru99 Bank Mini Statement Page"
        print("MS6 Passed")
        driver.back()

    def test8_MS7(self):
        driver = self.driver
        driver.find_element(By.LINK_TEXT, "Mini Statement").click()
        alert = Alert(driver)

        # MS7: Account Number
        ##  ! Swap valid accountNo !
        print("MS7 Input testing AccountNo: 12345")
        driver.find_element(By.NAME, "accountno").clear()
        driver.find_element(By.NAME, "accountno").send_keys("12345")
        driver.find_element(By.NAME, "AccSubmit").click()
        assert alert.text == "Account does not exist"
        print("=MS7:", alert.text)
        alert.accept()
        
    def test8_MS8(self):
        driver = self.driver
        driver.find_element(By.LINK_TEXT, "Mini Statement").click()
        alert = Alert(driver)

        # MS8: Verify reset Button
        driver.find_element(By.NAME, "AccSubmit").click()
        assert alert.text == "Please fill all fields"
        print("MS8-0 (Before input):", alert.text)
        alert.accept()
        driver.find_element(By.NAME, "accountno").clear()
        driver.find_element(By.NAME, "accountno").send_keys("qwer")
        sleep(1)
        driver.find_element(By.NAME, "res").click()
        sleep(1)
        driver.find_element(By.NAME, "AccSubmit").click()
        sleep(1)
        assert alert.text == "Please fill all fields"
        print("MS8-1 :", alert.text)
        sleep(2)
        alert.accept()

        driver.find_element(By.NAME, "accountno").send_keys("123456")
        sleep(1)
        driver.find_element(By.NAME, "res").click()
        sleep(1)
        driver.find_element(By.NAME, "AccSubmit").click()
        sleep(1)
        assert alert.text == "Please fill all fields"
        print("MS8-2 :", alert.text)
        sleep(3)
        alert.accept()
        print("MS8 Passed")

if __name__ == "__main__":
    unittest.main(testRunner=HtmlTestRunner.HTMLTestRunner(output="test_report"))